/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package diva.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import diva.util.DivaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DivaItemProviderAdapterFactory extends DivaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DivaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.VariabilityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariabilityModelItemProvider variabilityModelItemProvider;

	/**
	 * This creates an adapter for a {@link diva.VariabilityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariabilityModelAdapter() {
		if (variabilityModelItemProvider == null) {
			variabilityModelItemProvider = new VariabilityModelItemProvider(this);
		}

		return variabilityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Invariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvariantItemProvider invariantItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Invariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvariantAdapter() {
		if (invariantItemProvider == null) {
			invariantItemProvider = new InvariantItemProvider(this);
		}

		return invariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.EnumVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumVariableItemProvider enumVariableItemProvider;

	/**
	 * This creates an adapter for a {@link diva.EnumVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumVariableAdapter() {
		if (enumVariableItemProvider == null) {
			enumVariableItemProvider = new EnumVariableItemProvider(this);
		}

		return enumVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.BooleanVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableItemProvider booleanVariableItemProvider;

	/**
	 * This creates an adapter for a {@link diva.BooleanVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAdapter() {
		if (booleanVariableItemProvider == null) {
			booleanVariableItemProvider = new BooleanVariableItemProvider(this);
		}

		return booleanVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.AndTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndTermItemProvider andTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.AndTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndTermAdapter() {
		if (andTermItemProvider == null) {
			andTermItemProvider = new AndTermItemProvider(this);
		}

		return andTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.OrTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrTermItemProvider orTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.OrTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrTermAdapter() {
		if (orTermItemProvider == null) {
			orTermItemProvider = new OrTermItemProvider(this);
		}

		return orTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.NotTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotTermItemProvider notTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.NotTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotTermAdapter() {
		if (notTermItemProvider == null) {
			notTermItemProvider = new NotTermItemProvider(this);
		}

		return notTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.VariantTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantTermItemProvider variantTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.VariantTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantTermAdapter() {
		if (variantTermItemProvider == null) {
			variantTermItemProvider = new VariantTermItemProvider(this);
		}

		return variantTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.EnumTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumTermItemProvider enumTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.EnumTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumTermAdapter() {
		if (enumTermItemProvider == null) {
			enumTermItemProvider = new EnumTermItemProvider(this);
		}

		return enumTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.BooleanTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTermItemProvider booleanTermItemProvider;

	/**
	 * This creates an adapter for a {@link diva.BooleanTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTermAdapter() {
		if (booleanTermItemProvider == null) {
			booleanTermItemProvider = new BooleanTermItemProvider(this);
		}

		return booleanTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.EnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralItemProvider enumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link diva.EnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumLiteralAdapter() {
		if (enumLiteralItemProvider == null) {
			enumLiteralItemProvider = new EnumLiteralItemProvider(this);
		}

		return enumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Variant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantItemProvider variantItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Variant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantAdapter() {
		if (variantItemProvider == null) {
			variantItemProvider = new VariantItemProvider(this);
		}

		return variantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.ContextExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextExpressionItemProvider contextExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link diva.ContextExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextExpressionAdapter() {
		if (contextExpressionItemProvider == null) {
			contextExpressionItemProvider = new ContextExpressionItemProvider(this);
		}

		return contextExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.VariantExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantExpressionItemProvider variantExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link diva.VariantExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantExpressionAdapter() {
		if (variantExpressionItemProvider == null) {
			variantExpressionItemProvider = new VariantExpressionItemProvider(this);
		}

		return variantExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.PriorityRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PriorityRuleItemProvider priorityRuleItemProvider;

	/**
	 * This creates an adapter for a {@link diva.PriorityRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPriorityRuleAdapter() {
		if (priorityRuleItemProvider == null) {
			priorityRuleItemProvider = new PriorityRuleItemProvider(this);
		}

		return priorityRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.PropertyLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyLiteralItemProvider propertyLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link diva.PropertyLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyLiteralAdapter() {
		if (propertyLiteralItemProvider == null) {
			propertyLiteralItemProvider = new PropertyLiteralItemProvider(this);
		}

		return propertyLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.PropertyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyValueItemProvider propertyValueItemProvider;

	/**
	 * This creates an adapter for a {@link diva.PropertyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyValueAdapter() {
		if (propertyValueItemProvider == null) {
			propertyValueItemProvider = new PropertyValueItemProvider(this);
		}

		return propertyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.PropertyPriority} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyPriorityItemProvider propertyPriorityItemProvider;

	/**
	 * This creates an adapter for a {@link diva.PropertyPriority}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyPriorityAdapter() {
		if (propertyPriorityItemProvider == null) {
			propertyPriorityItemProvider = new PropertyPriorityItemProvider(this);
		}

		return propertyPriorityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.MultiplicityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicityConstraintItemProvider multiplicityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link diva.MultiplicityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicityConstraintAdapter() {
		if (multiplicityConstraintItemProvider == null) {
			multiplicityConstraintItemProvider = new MultiplicityConstraintItemProvider(this);
		}

		return multiplicityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.SimulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimulationModelItemProvider simulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link diva.SimulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimulationModelAdapter() {
		if (simulationModelItemProvider == null) {
			simulationModelItemProvider = new SimulationModelItemProvider(this);
		}

		return simulationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.ConfigVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigVariantItemProvider configVariantItemProvider;

	/**
	 * This creates an adapter for a {@link diva.ConfigVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigVariantAdapter() {
		if (configVariantItemProvider == null) {
			configVariantItemProvider = new ConfigVariantItemProvider(this);
		}

		return configVariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Score} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScoreItemProvider scoreItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Score}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScoreAdapter() {
		if (scoreItemProvider == null) {
			scoreItemProvider = new ScoreItemProvider(this);
		}

		return scoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.Priority} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PriorityItemProvider priorityItemProvider;

	/**
	 * This creates an adapter for a {@link diva.Priority}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPriorityAdapter() {
		if (priorityItemProvider == null) {
			priorityItemProvider = new PriorityItemProvider(this);
		}

		return priorityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.BoolVariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolVariableValueItemProvider boolVariableValueItemProvider;

	/**
	 * This creates an adapter for a {@link diva.BoolVariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolVariableValueAdapter() {
		if (boolVariableValueItemProvider == null) {
			boolVariableValueItemProvider = new BoolVariableValueItemProvider(this);
		}

		return boolVariableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.EnumVariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumVariableValueItemProvider enumVariableValueItemProvider;

	/**
	 * This creates an adapter for a {@link diva.EnumVariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumVariableValueAdapter() {
		if (enumVariableValueItemProvider == null) {
			enumVariableValueItemProvider = new EnumVariableValueItemProvider(this);
		}

		return enumVariableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.ConfigurationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationModelItemProvider configurationModelItemProvider;

	/**
	 * This creates an adapter for a {@link diva.ConfigurationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationModelAdapter() {
		if (configurationModelItemProvider == null) {
			configurationModelItemProvider = new ConfigurationModelItemProvider(this);
		}

		return configurationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.SuitableConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuitableConfigurationItemProvider suitableConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link diva.SuitableConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuitableConfigurationAdapter() {
		if (suitableConfigurationItemProvider == null) {
			suitableConfigurationItemProvider = new SuitableConfigurationItemProvider(this);
		}

		return suitableConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diva.ContextModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextModelItemProvider contextModelItemProvider;

	/**
	 * This creates an adapter for a {@link diva.ContextModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextModelAdapter() {
		if (contextModelItemProvider == null) {
			contextModelItemProvider = new ContextModelItemProvider(this);
		}

		return contextModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (variabilityModelItemProvider != null) variabilityModelItemProvider.dispose();
		if (invariantItemProvider != null) invariantItemProvider.dispose();
		if (enumVariableItemProvider != null) enumVariableItemProvider.dispose();
		if (booleanVariableItemProvider != null) booleanVariableItemProvider.dispose();
		if (andTermItemProvider != null) andTermItemProvider.dispose();
		if (orTermItemProvider != null) orTermItemProvider.dispose();
		if (notTermItemProvider != null) notTermItemProvider.dispose();
		if (variantTermItemProvider != null) variantTermItemProvider.dispose();
		if (enumTermItemProvider != null) enumTermItemProvider.dispose();
		if (booleanTermItemProvider != null) booleanTermItemProvider.dispose();
		if (enumLiteralItemProvider != null) enumLiteralItemProvider.dispose();
		if (variantItemProvider != null) variantItemProvider.dispose();
		if (dimensionItemProvider != null) dimensionItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (contextExpressionItemProvider != null) contextExpressionItemProvider.dispose();
		if (variantExpressionItemProvider != null) variantExpressionItemProvider.dispose();
		if (priorityRuleItemProvider != null) priorityRuleItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (propertyLiteralItemProvider != null) propertyLiteralItemProvider.dispose();
		if (propertyValueItemProvider != null) propertyValueItemProvider.dispose();
		if (propertyPriorityItemProvider != null) propertyPriorityItemProvider.dispose();
		if (multiplicityConstraintItemProvider != null) multiplicityConstraintItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (simulationModelItemProvider != null) simulationModelItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (configVariantItemProvider != null) configVariantItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (scoreItemProvider != null) scoreItemProvider.dispose();
		if (priorityItemProvider != null) priorityItemProvider.dispose();
		if (boolVariableValueItemProvider != null) boolVariableValueItemProvider.dispose();
		if (enumVariableValueItemProvider != null) enumVariableValueItemProvider.dispose();
		if (configurationModelItemProvider != null) configurationModelItemProvider.dispose();
		if (suitableConfigurationItemProvider != null) suitableConfigurationItemProvider.dispose();
		if (contextModelItemProvider != null) contextModelItemProvider.dispose();
	}

}
