@mainClass "diva::WP2Reasoner"
@mainOperation "main"

package diva;

require "DiVA_Impl.kmt"
require "DiVA2Alloy.kmt"
require "../model/diva_configuration.ecore" 
require "../model/diva_context.ecore"

require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kermeta::io


class WP2Reasoner
{

	@componentType "WP2Reasoner"
	operation getBestConfigurations(model_uri : String, context_uri : String) : String is do 
		
		var res : EMFRepository init EMFRepository.new
		
		res.registerEcoreFile("platform:/resource/model/DiVA_Merged.ecore" )
		res.registerEcoreFile("platform:/resource/model/diva_context.ecore" )
		res.registerEcoreFile("platform:/resource/model/diva_configuration.ecore" )
        
        // Load the DiVA model
        var resource : Resource init res.createResource(model_uri, "http://www.diva.org/diva")
        stdio.writeln("Loading model " + model_uri + "...")
        resource.load()
        var divaModel : VariabilityModel
        divaModel ?= resource.instances.one
        divaModel.clean
        
        // Load the DiVA model
        resource := res.createResource(context_uri, "http://diva_context/1.0")
        stdio.writeln("Loading model " + context_uri + "...")
        resource.load()
        var contextModel : diva_context::Context
        contextModel ?= resource.instances.one
        
        divaModel.simulation.scenario.clear
        var scn : Scenario init Scenario.new
        var ctx : diva::Context init diva::Context.new
    
        divaModel.context.each{ v |
			var vv : VariableValue
			var e : diva_context::ContextElement init contextModel.element.detect{ o | o.name == v.id }
			if e != void then
				if v.isKindOf(BooleanVariable) then
					vv := BoolVariableValue.new
					if e.currentValue == "true" then vv.asType(BoolVariableValue).bool := true else vv.asType(BoolVariableValue).bool := false end
				else
					vv := EnumVariableValue.new
					vv.asType(EnumVariableValue).literal := v.asType(EnumVariable).literal.detect{ l | l.id == e.currentValue }
				end
			else
				if v.isKindOf(BooleanVariable) then
					vv := BoolVariableValue.new
					vv.asType(BoolVariableValue).bool := false
				else
					vv := EnumVariableValue.new
					vv.asType(EnumVariableValue).literal := v.asType(EnumVariable).literal.one
				end
			end
			vv.variable := v
			ctx.variable.add(vv)
		}
		divaModel.simulation.scenario.add(scn)
		scn.context.add(ctx)
		
		divaModel.simulation.scenario.each{ s | s.context.each { ctx |
        	stdio.writeln("Compute Configurations for Context " + ctx.name.toString  + "...")
        	ctx.alloy_computeSuitableConfigurations(divaModel)
        }}
        
        divaModel.simulation.scenario.each{ s | s.context.each { ctx |
        	stdio.writeln("Compute Priorities for Context " + ctx.name.toString  + "...")
        	ctx.computePriorities(divaModel)
        }}
        
        divaModel.simulation.scenario.each{ s | s.context.each { ctx |
        	stdio.writeln("Compute Scores for Context " + ctx.name.toString  + "...")
        	ctx.computeScores(divaModel)
        }}
        
        
        var resource_out : Resource init res.createResource(context_uri + "_result.xmi", "http://diva_configuration/1.0")
		var root : diva_configuration::SuitableConfigurations init diva_configuration::SuitableConfigurations.new
		
		//var model_out : Resource init res.createResource(model_uri + "_result.xmi", "http://www.diva.org/diva")
		//model_out.add(divaModel)
		//model_out.save()
		
		ctx.configuration.each{c|
			stdio.writeln("Configuration : " + c.toString)
			var cfg : diva_configuration::Configuration init diva_configuration::Configuration.new
			root.configurations.add(cfg)
			cfg.score := c.totalScore
			c.variant.each { v |
				var va : diva_configuration::Aspect init diva_configuration::Aspect.new
				va.name := v.variant.name
				cfg.~aspect.add(va)
			}
		}
		
		resource_out.add(root)
		
        stdio.writeln("Saving model...")
        resource_out.save
        stdio.writeln("done.")
		
		result := context_uri + "_result.xmi"
        
	end
	
	operation main() is do
		var diva_model : String init "platform:/resource/eu.ict_diva.study.CAS/design/scenario1.diva"
		var context_model : String init "platform:/resource/diva.model/test/context.xmi"
		var result_uri : String
		
		result_uri := getBestConfigurations(diva_model, context_model)
		
		stdio.writeln("Result saved in " + result_uri )
	end

}