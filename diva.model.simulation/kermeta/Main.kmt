/* $Id:$ 
 * Creation : February 18, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ffl
 */
@mainClass "diva::Main"
@mainOperation "main"

package diva;

require "DiVA_Impl.kmt"
require "DiVA2Alloy.kmt"

require kermeta

using kermeta::standard
using kermeta::utils
using kermeta::persistence
using kermeta::io


class Main
{
	
	@componentType "Validator"
	operation populateVerdicts(uri : String) : Void is do 
		// Load the model
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(uri, "http://www.diva.org/diva")
        
        stdio.writeln("Loading model...")
        resource.load()
        var model : VariabilityModel 
        model ?= resource.instances.one
        
        if model.simulation != void then
	        model.simulation.scenario.each{ s | s.context.each { ctx |
	        	stdio.writeln("Processing context " + ctx.name.toString  + "...")
	        	ctx.computeVerdicts
	        }}
	        stdio.writeln("Saving model...")
	        resource.save
	        stdio.writeln("done.")
	    else
	    	stdio.writeln("No simulation model found.")
        end
        
	end
	
	@componentType "Simulator"
	operation populateCompleteSimulation(uri : String) : Void is do 
		// Load the model
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(uri, "http://www.diva.org/diva")
        
        stdio.writeln("Loading model...")
        resource.load()
        var model : VariabilityModel 
        model ?= resource.instances.one
        
        if model.simulation != void then
        
        	model.simulation.scenario.each{ s | s.context.each { ctx |
	        	stdio.writeln("Compute Configurations for Context " + ctx.name.toString  + "...")
	        	ctx.alloy_computeSuitableConfigurations(model)
	        }}
	        
	        model.simulation.scenario.each{ s | s.context.each { ctx |
	        	stdio.writeln("Compute Priorities for Context " + ctx.name.toString  + "...")
	        	ctx.computePriorities(model)
	        }}
	        
	        model.simulation.scenario.each{ s | s.context.each { ctx |
	        	stdio.writeln("Compute Scores for Context " + ctx.name.toString  + "...")
	        	ctx.computeScores(model)
	        }}
	        
	        model.simulation.scenario.each{ s | s.context.each { ctx |
	        	stdio.writeln("Compute Verdict for Context " + ctx.name.toString  + "...")
	        	ctx.computeVerdicts
	        }}
	        
	        stdio.writeln("Saving model...")
	        resource.save
	        stdio.writeln("done.")
	        
	    else
	    	stdio.writeln("No simulation model found.")
        end
        
	end
	
	
	@componentType "Simulator"
	operation exportExhaustiveSimulation(uri : String) : Void is do 
		// Load the model
		var res : EMFRepository init EMFRepository.new
        var resource : Resource init res.createResource(uri, "http://www.diva.org/diva")
        
        stdio.writeln("Loading model...")
        resource.load()
        var model : VariabilityModel 
        model ?= resource.instances.one
        
        stdio.writeln("Computing exhaustive simulation...")
		model.exportSimulationStateMachine

        
	end
}